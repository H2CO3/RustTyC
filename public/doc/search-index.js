var searchIndex = JSON.parse('{\
"rusttyc":{"doc":"This crate provides an interface to perform lattice-based…","i":[[3,"TcKey","rusttyc","An inexpensive and simple indexing mechanism using during…",null,null],[3,"TypeChecker","","The `TypeChecker` is the main interaction point for the…",null,null],[4,"TcErr","","Represents an error during the type check procedure.",null,null],[13,"KeyEquation","","Two keys were attempted to be equated and their underlying…",0,null],[13,"Bound","","An explicit type bound imposed on a key turned out to be…",0,null],[13,"ChildAccessOutOfBound","","This error occurs when a constraint accesses the `n`th…",0,null],[13,"ExactTypeViolation","","Indicates a violation of an exact type requirement for a…",0,null],[13,"ConflictingExactBounds","","Indicates that a key has two conflicting, i.e. non-equal,…",0,null],[11,"concretizes","","Connects two keys asymmetrically. Refining `bound` refines…",1,[[],[["abstract",8],["constraint",4]]]],[11,"equate_with","","equate_withs two keys, i.e., they refer to the same type…",1,[[],[["abstract",8],["constraint",4]]]],[11,"concretizes_explicit","","Declares that `self` is at least as concrete as `bound`.",1,[[["abstract",8]],[["abstract",8],["constraint",4]]]],[11,"is_meet_of","","Declares that `self` is the meet of `left` and `right`.…",1,[[],[["abstract",8],["constraint",4]]]],[11,"is_meet_of_all","","Declares that `self` is the meet of all elements contained…",1,[[],[["abstract",8],["constraint",4]]]],[11,"is_sym_meet_of","","Declares that `self` is the symmetric meet of `left` and…",1,[[],[["abstract",8],["constraint",4]]]],[11,"is_sym_meet_of_all","","Declares that `self` is the symmetric meet of all elements…",1,[[],[["abstract",8],["constraint",4]]]],[11,"has_exactly_type","","Ensures that the type behind `self` is exactly `ty`. As a…",1,[[["abstract",8]],[["abstract",8],["constraint",4]]]],[11,"concretizes_concrete","","Declares that `self` is at least as concrete as the…",1,[[],[["abstract",8],["constraint",4]]]],[11,"new","","Creates a new, empty `TypeChecker`.  ",2,[[]]],[11,"new_term_key","","Generates a new key representing a term.  ",2,[[],["tckey",3]]],[11,"get_var_key","","Manages keys for variables. It checks if `var` already has…",2,[[],["tckey",3]]],[11,"get_child_key","","Provides a key to the `nth` child of the type behind…",2,[[["tckey",3]],[["result",4],["tckey",3],["tcerr",4]]]],[11,"impose","","Imposes a constraint on keys. They can be obtained by…",2,[[["constraint",4]],[["result",4],["tcerr",4]]]],[11,"all_keys","","Returns an iterator over all keys currently present in the…",2,[[]]],[11,"type_check","","Finalizes the type check procedure. Calling this function…",2,[[],[["abstracttypetable",3],["tcerr",4],["result",4]]]],[0,"types","","This mod contains everything related to types and…",null,null],[3,"AbstractTypeTable","rusttyc::types","An implementation of `TypeTable` for type implementing…",null,null],[3,"ReifiedTypeTable","","An implementation of `TypeTable` for concrete types. See…",null,null],[4,"ReificationErr","","Indicates that an abstract type could not be reified…",null,null],[13,"TooGeneral","","Attempting to reify an abstract type with either no unique…",3,null],[13,"Conflicting","","Attempting to reify an abstract type for which no concrete…",3,null],[8,"Abstract","","An abstract type that will be inferred during the type…",null,null],[16,"Err","","Result of a meet of two incompatible type, i.e., it…",4,null],[10,"unconstrained","","Returns the unconstrained, most abstract type.",4,[[]]],[11,"is_unconstrained","","Determines whether or not `self` is the unconstrained type.",4,[[]]],[10,"meet","","Attempts to meet two abstract types. Refer to the…",4,[[],["result",4]]],[10,"arity","","Provides the arity of the `self` if the type is…",4,[[],["option",4]]],[10,"nth_child","","Provide access to the nth child. # Guarantee The arity of…",4,[[]]],[10,"with_children","","Generate an instance of Self that is equivalent to `self`…",4,[[]]],[8,"Reifiable","","A type implementing this trait can be `reified` into a…",null,null],[16,"Reified","","The result type of the reification.",5,null],[10,"reify","","Transforms `self` into the more concrete `Self::Reified`…",5,[[]]],[8,"TryReifiable","","A type implementing this trait can potentially be…",null,null],[16,"Reified","","The result type of the attempted reification.",6,null],[10,"try_reify","","Attempts to transform `self` into an more concrete…",6,[[],[["reificationerr",4],["result",4]]]],[8,"Generalizable","","A type implementing this trait can be `generalized` into…",null,null],[16,"Generalized","","The result type of the generalization.",7,null],[10,"generalize","","Generalizes the given concrete type.",7,[[]]],[8,"TypeTable","","A trait representing a type table.",null,null],[16,"Type","","The (rust-) type of the (external-) type stored in this…",8,null],[10,"as_hashmap","","Transforms itself into a hashmap.",8,[[],[["hashmap",3],["tckey",3]]]],[11,"reified","","Transforms an `AbstractTypeTable` into a…",9,[[],["reifiedtypetable",3]]],[11,"try_reified","","Attempts to transform an `AbstractTypeTable` into a…",9,[[],[["result",4],["reifiedtypetable",3]]]],[8,"TcVar","rusttyc","Represents a re-usable variable in the type checking…",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","rusttyc::types","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"as_hashmap","","",9,[[],[["hashmap",3],["tckey",3]]]],[11,"as_hashmap","","",10,[[],[["hashmap",3],["tckey",3]]]],[11,"from","","",9,[[["hashmap",3],["tckey",3]]]],[11,"from","","",10,[[["hashmap",3],["tckey",3]]]],[11,"clone","rusttyc","",1,[[],["tckey",3]]],[11,"clone","","",2,[[],["typechecker",3]]],[11,"clone","","",0,[[],["tcerr",4]]],[11,"clone","rusttyc::types","",3,[[],["reificationerr",4]]],[11,"clone","","",9,[[],["abstracttypetable",3]]],[11,"clone","","",10,[[],["reifiedtypetable",3]]],[11,"default","rusttyc","",2,[[]]],[11,"eq","","",1,[[["tckey",3]]]],[11,"ne","","",1,[[["tckey",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","rusttyc::types","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"index","","",9,[[["tckey",3]]]],[11,"index","","",10,[[["tckey",3]]]],[11,"hash","rusttyc","",1,[[]]]],"p":[[4,"TcErr"],[3,"TcKey"],[3,"TypeChecker"],[4,"ReificationErr"],[8,"Abstract"],[8,"Reifiable"],[8,"TryReifiable"],[8,"Generalizable"],[8,"TypeTable"],[3,"AbstractTypeTable"],[3,"ReifiedTypeTable"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);